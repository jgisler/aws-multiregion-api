AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS SAM template for deploying a serverless API with a global DynamoDB table

Parameters:
   EnvironmentName:
      Type: String
      Description: Used in resource naming to associate resources with a stack

   AuthorizationTtlInSeconds:
      Type: Number
      Description: TTL for Auth cache

   AuthorizerFunctionMemorySizeInMb:
      Type: Number
      Description: MemorySize setting for Authorizer lambda function, in megabytes

   AuthorizerFunctionTimeoutInSeconds:
      Type: Number
      Description: Timeout setting for Authorizer lambda function, in seconds

   RequestHandlerFunctionMemorySizeInMb:
      Type: Number
      Description: MemorySize setting for RequestHandler lambda function, in megabytes

   RequestHandlerFunctionTimeoutInSeconds:
      Type: Number
      Description: Timeout setting for RequestHandler lambda function, in seconds

   UserActivityEventTableRCU:
      Type: Number
      Description: ReadCapacityUnits for UserActivityEventTable

   UserActivityEventTableWCU:
      Type: Number
      Description: WriteCapacityUnits for UserActivityEventTable

   LogRetentionInDays:
      Type: Number
      Description: Duration to keep log streams in CloudWatch

Globals:
   Function:
      Runtime: nodejs8.10

Resources:
   AuthorizerFunction:
      Type: AWS::Serverless::Function
      Properties:
         Role: !GetAtt AuthorizerFunctionRole.Arn
         Handler: index.authorize
         CodeUri: dist/dist.zip
         Description: API Authorizer
         Timeout: !Ref AuthorizerFunctionTimeoutInSeconds
         MemorySize: !Ref AuthorizerFunctionMemorySizeInMb
         Environment:
            Variables:
               ENVIRONMENT_NAME: !Ref EnvironmentName

   AuthorizerFunctionRole:
      Type: AWS::IAM::Role
      Properties:
         Path: '/'
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action: sts:AssumeRole
                 Principal:
                    Service: lambda.amazonaws.com

   AuthorizerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub /aws/lambda/${AuthorizerFunction}
         RetentionInDays: !Ref LogRetentionInDays

   RequestHandlerFunction:
      Type: AWS::Serverless::Function
      Properties:
         Role: !GetAtt RequestHandlerFunctionRole.Arn
         Handler: index.handlerRequest
         CodeUri: dist/dist.zip
         Timeout: !Ref AuthorizerFunctionTimeoutInSeconds
         MemorySize: !Ref AuthorizerFunctionMemorySizeInMb
         Description: API request handlers
         Environment:
            Variables:
               ENVIRONMENT_NAME: !Ref EnvironmentName

   RequestHandlerFunctionRole:
      Type: AWS::IAM::Role
      Properties:
         Path: '/'
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action: sts:AssumeRole
                 Principal:
                    Service: lambda.amazonaws.com

   RequestHandlerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub /aws/lambda/${RequestHandlerFunction}
         RetentionInDays: !Ref LogRetentionInDays

   UserActivityEventTable:
      Type: AWS::DynamoDB::Table
      Properties:
         AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S # uuid v4
            - AttributeName: eventTimestamp # new Date().getTime()
              AttributeType: N
            - AttributeName: eventDatePartition # 2018-10-13_[0..11] -- GSI1
              AttributeType: S
         KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: eventTimestamp
              KeyType: RANGE
         ProvisionedThroughput:
            ReadCapacityUnits: !Ref UserActivityEventTableRCU
            WriteCapacityUnits: !Ref UserActivityEventTableWCU
         GlobalSecondaryIndexes:
            - IndexName: gsi-eventDatePartion-userId
              KeySchema:
                 - AttributeName: eventDatePartition
                   KeyType: HASH
                 - AttributeName: userId
                   KeyType: RANGE
              ProvisionedThroughput:
                 ReadCapacityUnits: !Ref UserActivityEventTableRCU
                 WriteCapacityUnits: !Ref UserActivityEventTableWCU
              Projection:
                 ProjectionType: ALL
         StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
         TimeToLiveSpecification:
            Enabled: true
            AttributeName: eventExpirationDateInSeconds
         BillingMode: PROVISIONED
         SSESpecification:
            SSEEnabled: true

   ## Policies
   LoggingPolicy:
      Type: AWS::IAM::Policy
      Properties:
         PolicyName: ApigLambdaInvokePolicy
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action: lambda:InvokeFunction
                 Resource:
                    - !GetAtt AuthorizerFunction.Arn
                    - !GetAtt RequestHandlerFunction.Arn
         Roles:
            - !Ref AuthorizerFunctionRole
            - !Ref RequestHandlerFunctionRole

Outputs:
   UserActivityEventTableName:
      Description: Physical resource ID of the UserActivityEventTable
      Value: !Ref UserActivityEventTable
      Export:
         Name: !Sub ${AWS::StackName}::UserActivityEventTableName

   UserActivityEventTableStreamArn:
      Description: ARN of the table stream
      Value: !GetAtt UserActivityEventTable.StreamArn
      Export:
         Name: !Sub ${AWS::StackName}::UserActivityEventTableStreamArn
