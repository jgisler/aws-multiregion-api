AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS SAM template for deploying a serverless API with a global DynamoDB table

Parameters:
   EnvironmentName:
      Type: String
      Description: Used in resource naming to associate resources with a stack

   AuthorizationTtlInSeconds:
      Type: Number
      Description: TTL for Auth cache

   AuthorizerFunctionMemorySizeInMb:
      Type: Number
      Description: MemorySize setting for Authorizer lambda function, in megabytes

   AuthorizerFunctionTimeoutInSeconds:
      Type: Number
      Description: Timeout setting for Authorizer lambda function, in seconds

   RequestHandlerMemorySizeInMb:
      Type: Number
      Description: MemorySize setting for RequestHandler lambda function, in megabytes

   RequestHandlerTimeoutInSeconds:
      Type: Number
      Description: Timeout setting for RequestHandler lambda function, in seconds

   UserActivityTableRCU:
      Type: Number
      Description: ReadCapacityUnits for UserActivityTable

   UserActivityTableWCU:
      Type: Number
      Description: WriteCapacityUnits for UserActivityTable

   LogRetentionInDays:
      Type: Number
      Description: Duration to keep log streams in CloudWatch

Globals:
   Function:
      Runtime: nodejs10.x

Resources:
   UserActivityV1:
      Type: AWS::Serverless::Api
      Properties:
         StageName: !Ref EnvironmentName
         EndpointConfiguration: REGIONAL
         AccessLogSetting:
            DestinationArn: !GetAtt ApiLogGroup.Arn
         Auth:
            DefaultAuthorizer: TokenAuthorizer # OPTIONAL, if you use IAM permissions, specify AWS_IAM.
            Authorizers:
               TokenAuthorizer:
                  FunctionPayloadType: TOKEN
                  FunctionArn: !GetAtt AuthorizerFunction.Arn
                  Identity:
                     Header: Authorization
                     ReauthorizeEvery: 20
                     ValidationExpression: Bearer.*

   ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub /aws/lambda/${UserActivityV1}
         RetentionInDays: !Ref LogRetentionInDays

   AuthorizerFunction:
      Type: AWS::Serverless::Function
      Properties:
         Role: !GetAtt AuthorizerFunctionRole.Arn
         Handler: index.authorize
         CodeUri: ../dist.zip
         Description: API Authorizer
         Timeout: !Ref AuthorizerFunctionTimeoutInSeconds
         MemorySize: !Ref AuthorizerFunctionMemorySizeInMb
         Environment:
            Variables:
               ENVIRONMENT_NAME: !Ref EnvironmentName

   AuthorizerFunctionRole:
      Type: AWS::IAM::Role
      Properties:
         Path: '/'
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action: sts:AssumeRole
                 Principal:
                    Service: lambda.amazonaws.com

   AuthorizerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub /aws/lambda/${AuthorizerFunction}
         RetentionInDays: !Ref LogRetentionInDays

   SaveUserActivityV1Function:
      Type: AWS::Serverless::Function
      Properties:
         Role: !GetAtt SaveUserActivityV1Role.Arn
         Handler: src/handlers/useractivity/v1/post.handler
         CodeUri: ../dist.zip
         Timeout: !Ref RequestHandlerTimeoutInSeconds
         MemorySize: !Ref RequestHandlerMemorySizeInMb
         Description: API request handlers
         Environment:
            Variables:
               ENVIRONMENT_NAME: !Ref EnvironmentName
               USER_ACTIVITY_TABLE_NAME: !Ref UserActivityTable
         Events:
            SaveUserActivity:
               Type: Api
               Properties:
                  Method: post
                  Path: /useractivity/v1
                  RestApiId: !Ref UserActivityV1

   SaveUserActivityV1LogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub /aws/lambda/${SaveUserActivityV1Function}
         RetentionInDays: !Ref LogRetentionInDays

   SaveUserActivityV1Role:
      Type: AWS::IAM::Role
      Properties:
         Path: '/'
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action: sts:AssumeRole
                 Principal:
                    Service: lambda.amazonaws.com

   GetUserActivityV1Function:
      Type: AWS::Serverless::Function
      Properties:
         Role: !GetAtt GetUserActivityV1Role.Arn
         Handler: src/handlers/useractivity/v1/get.handler
         CodeUri: ../dist.zip
         Timeout: !Ref RequestHandlerTimeoutInSeconds
         MemorySize: !Ref RequestHandlerMemorySizeInMb
         Description: Handle GET /useractivity/v1 requests
         Environment:
            Variables:
               ENVIRONMENT_NAME: !Ref EnvironmentName
               USER_ACTIVITY_TABLE_NAME: !Ref UserActivityTable
         Events:
            GetUserActivityV1:
               Type: Api
               Properties:
                  Method: get
                  Path: /useractivity/v1/{userId}
                  RestApiId: !Ref UserActivityV1

   GetUserActivityV1LogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
         LogGroupName: !Sub /aws/lambda/${GetUserActivityV1Function}
         RetentionInDays: !Ref LogRetentionInDays

   GetUserActivityV1Role:
      Type: AWS::IAM::Role
      Properties:
         Path: '/'
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action: sts:AssumeRole
                 Principal:
                    Service: lambda.amazonaws.com

   UserActivityTable:
      Type: AWS::DynamoDB::Table
      Properties:
         AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S # uuid v4
            - AttributeName: activityDatePartition # 2018-10-13_[0..11] -- GSI1
              AttributeType: S
         KeySchema:
            - AttributeName: userId
              KeyType: HASH
         ProvisionedThroughput:
            ReadCapacityUnits: !Ref UserActivityTableRCU
            WriteCapacityUnits: !Ref UserActivityTableWCU
         GlobalSecondaryIndexes:
            - IndexName: gsi-eventDatePartion-userId
              KeySchema:
                 - AttributeName: activityDatePartition
                   KeyType: HASH
                 - AttributeName: userId
                   KeyType: RANGE
              ProvisionedThroughput:
                 ReadCapacityUnits: !Ref UserActivityTableRCU
                 WriteCapacityUnits: !Ref UserActivityTableWCU
              Projection:
                 ProjectionType: ALL
         StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
         TimeToLiveSpecification:
            Enabled: true
            AttributeName: itemExpirationDateInSeconds
         PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
         BillingMode: PROVISIONED
         SSESpecification:
            SSEEnabled: true

   ## Policies
   LoggingPolicy:
      Type: AWS::IAM::Policy
      Properties:
         PolicyName: LoggingPolicy
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action:
                    - logs:Create*
                    - logs:PutLogEvents
                 Resource:
                    - !GetAtt AuthorizerLogGroup.Arn
                    - !GetAtt GetUserActivityV1LogGroup.Arn
                    - !GetAtt SaveUserActivityV1LogGroup.Arn
         Roles:
            - !Ref AuthorizerFunctionRole
            - !Ref GetUserActivityV1Role
            - !Ref SaveUserActivityV1Role

   GetUserActivityV1TablePolicy:
      Type: AWS::IAM::Policy
      Properties:
         PolicyName: GetUserActivityV1Policy
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action:
                    - dynamodb:GetItem
                 Resource:
                    - !GetAtt UserActivityTable.Arn
         Roles:
            - !Ref GetUserActivityV1Role

   SaveUserActivityV1TablePolicy:
      Type: AWS::IAM::Policy
      Properties:
         PolicyName: SaveUserActivityV1TablePolicy
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               - Effect: Allow
                 Action:
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                 Resource:
                    - !GetAtt UserActivityTable.Arn
         Roles:
            - !Ref GetUserActivityV1Role

Outputs:
   UserActivityTableName:
      Description: Physical resource ID of the UserActivityTable
      Value: !Ref UserActivityTable
      Export:
         Name: !Sub ${AWS::StackName}::UserActivityTableName

   UserActivityTableStreamArn:
      Description: ARN of the table stream
      Value: !GetAtt UserActivityTable.StreamArn
      Export:
         Name: !Sub ${AWS::StackName}::UserActivityTableStreamArn
